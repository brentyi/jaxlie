:orphan:

:mod:`jaxlie._base`
===================

.. py:module:: jaxlie._base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._base.MatrixLieGroup
   jaxlie._base.SOBase
   jaxlie._base.SEBase




Attributes
~~~~~~~~~~

.. autoapisummary::

   jaxlie._base.GroupType
   jaxlie._base.SEGroupType
   jaxlie._base.ContainedSOType


.. data:: GroupType
   

   

.. data:: SEGroupType
   

   

.. class:: MatrixLieGroup(parameters)


   Bases: :py:obj:`abc.ABC`, :py:obj:`overrides.EnforceOverrides`

   .. autoapi-inheritance-diagram:: jaxlie._base.MatrixLieGroup
      :parts: 1

   Interface definition for matrix Lie groups.

   .. attribute:: matrix_dim
      :annotation: :ClassVar[int]

      Dimension of square matrix output from ``.as_matrix()``.


   .. attribute:: parameters_dim
      :annotation: :ClassVar[int]

      Dimension of underlying parameters, ``.parameters()``.


   .. attribute:: tangent_dim
      :annotation: :ClassVar[int]

      Dimension of tangent space.


   .. attribute:: space_dim
      :annotation: :ClassVar[int]

      Dimension of coordinates that can be transformed.


   .. method:: __matmul__(self: GroupType, other: GroupType) -> GroupType
               __matmul__(self: GroupType, other: jaxlie.hints.Vector) -> jaxlie.hints.VectorJax

      Overload for the ``@`` operator.

      Switches between the group action (\ ``.apply()``\ ) and multiplication
      (\ ``.multiply()``\ ) based on the type of ``other``.


   .. method:: identity(cls)
      :classmethod:
      :abstractmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(cls, matrix)
      :classmethod:
      :abstractmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)
      :abstractmethod:

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)
      :abstractmethod:

      Get underlying representation.


   .. method:: apply(self, target)
      :abstractmethod:

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)
      :abstractmethod:

      Composes this transformation with another.

      :returns: self @ other


   .. method:: exp(cls, tangent)
      :classmethod:
      :abstractmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)
      :abstractmethod:

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)
      :abstractmethod:

      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self)
      :abstractmethod:

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)
      :abstractmethod:

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(cls, key)
      :classmethod:
      :abstractmethod:

      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



.. class:: SOBase(parameters)


   Bases: :py:obj:`MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie._base.SOBase
      :parts: 1

   Base class for special orthogonal groups.


.. data:: ContainedSOType
   

   

.. class:: SEBase(parameters)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`ContainedSOType`\ ], :py:obj:`MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie._base.SEBase
      :parts: 1

   Base class for special Euclidean groups.

   Each SE(N) group member contains an SO(N) rotation, as well as an N-dimensional
   translation vector.

   .. method:: from_rotation_and_translation(cls, rotation, translation)
      :classmethod:
      :abstractmethod:

      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.


   .. method:: rotation(self)
      :abstractmethod:

      Returns a transform's rotation term.


   .. method:: translation(self)
      :abstractmethod:

      Returns a transform's translation term.


   .. method:: apply(self, target)

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)

      Composes this transformation with another.

      :returns: self @ other


   .. method:: inverse(self)

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.



