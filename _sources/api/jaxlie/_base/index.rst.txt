:orphan:

:py:mod:`jaxlie._base`
======================

.. py:module:: jaxlie._base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie.MatrixLieGroup
   jaxlie.SOBase
   jaxlie.SEBase




Attributes
~~~~~~~~~~

.. autoapisummary::

   jaxlie._base.GroupType
   jaxlie._base.SEGroupType
   jaxlie._base.ContainedSOType


.. py:data:: GroupType

   

.. py:data:: SEGroupType

   

.. py:class:: MatrixLieGroup(parameters)


   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: jaxlie.MatrixLieGroup
      :parts: 1

   
   Interface definition for matrix Lie groups.
   .. py:attribute:: matrix_dim
      :type: ClassVar[int]

      
      Dimension of square matrix output from ``.as_matrix()``.

   .. py:attribute:: parameters_dim
      :type: ClassVar[int]

      
      Dimension of underlying parameters, ``.parameters()``.

   .. py:attribute:: tangent_dim
      :type: ClassVar[int]

      
      Dimension of tangent space.

   .. py:attribute:: space_dim
      :type: ClassVar[int]

      
      Dimension of coordinates that can be transformed.

   .. py:method:: __matmul__(other: GroupType) -> GroupType
                  __matmul__(other: jaxlie.hints.Array) -> jax.Array

      
      Overload for the ``@`` operator.

      Switches between the group action (\ ``.apply()``\ ) and multiplication
      (\ ``.multiply()``\ ) based on the type of ``other``.

   .. py:method:: identity()
      :classmethod:
      :abstractmethod:

      
      Returns identity element.

      :returns: Identity element.

   .. py:method:: from_matrix(matrix)
      :classmethod:
      :abstractmethod:

      
      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.

   .. py:method:: as_matrix()
      :abstractmethod:

      
      Get transformation as a matrix. Homogeneous for SE groups.

   .. py:method:: parameters()
      :abstractmethod:

      
      Get underlying representation.

   .. py:method:: apply(target)
      :abstractmethod:

      
      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.

   .. py:method:: multiply(other)
      :abstractmethod:

      
      Composes this transformation with another.

      :returns: self @ other

   .. py:method:: exp(tangent)
      :classmethod:
      :abstractmethod:

      
      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.

   .. py:method:: log()
      :abstractmethod:

      
      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.

   .. py:method:: adjoint()
      :abstractmethod:

      
      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.

   .. py:method:: inverse()
      :abstractmethod:

      
      Computes the inverse of our transform.

      :returns: Output.

   .. py:method:: normalize()
      :abstractmethod:

      
      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.

   .. py:method:: sample_uniform(key)
      :classmethod:
      :abstractmethod:

      
      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.

   .. py:method:: get_batch_axes()
      :abstractmethod:

      
      Return any leading batch axes in contained parameters. If an array of shape
      ``(100, 4)`` is placed in the wxyz field of an SO3 object, for example, this will
      return ``(100,)``.

      This should generally be implemented by ``jdc.EnforcedAnnotationsMixin``.


.. py:class:: SOBase(parameters)


   Bases: :py:obj:`MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie.SOBase
      :parts: 1

   
   Base class for special orthogonal groups.

.. py:data:: ContainedSOType

   

.. py:class:: SEBase(parameters)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`ContainedSOType`\ ], :py:obj:`MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie.SEBase
      :parts: 1

   
   Base class for special Euclidean groups.

   Each SE(N) group member contains an SO(N) rotation, as well as an N-dimensional
   translation vector.
   .. py:method:: from_rotation_and_translation(rotation, translation)
      :classmethod:
      :abstractmethod:

      
      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.

   .. py:method:: from_rotation(rotation)
      :classmethod:


   .. py:method:: rotation()
      :abstractmethod:

      
      Returns a transform's rotation term.

   .. py:method:: translation()
      :abstractmethod:

      
      Returns a transform's translation term.

   .. py:method:: apply(target)

      
      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.

   .. py:method:: multiply(other)

      
      Composes this transformation with another.

      :returns: self @ other

   .. py:method:: inverse()

      
      Computes the inverse of our transform.

      :returns: Output.

   .. py:method:: normalize()

      
      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


