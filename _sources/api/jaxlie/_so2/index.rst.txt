:orphan:

:mod:`jaxlie._so2`
==================

.. py:module:: jaxlie._so2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._so2.SO2



.. py:class:: SO2(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie._so2.SO2
      :parts: 1

   Special orthogonal group for 2D rotations.

   .. attribute:: unit_complex
      :annotation: :hints.Vector

      Internal parameters. ``(cos, sin)``.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_radians(theta: hints.Scalar) -> 'SO2'
      :staticmethod:


   .. method:: as_radians(self) -> jnp.ndarray


   .. method:: identity() -> 'SO2'
      :staticmethod:

      Returns identity element.

      :returns: *hints.Matrix* -- Identity.


   .. method:: from_matrix(matrix: hints.Matrix) -> 'SO2'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: hints.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: as_matrix(self) -> hints.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> hints.Vector

      Get underlying representation.


   .. method:: apply(self: SO2, target: hints.Vector) -> hints.Vector

      Applies the group action.

      :param target: hints.Vector to transform.
      :type target: hints.Vector

      :returns: *hints.Vector* -- Transformed vector.


   .. method:: multiply(self: SO2, other: SO2) -> 'SO2'

      Left-multiplies this transformations with another.

      :param other: other
      :type other: GroupType

      :returns: *GroupType* -- self @ other


   .. method:: exp(tangent: hints.TangentVector) -> 'SO2'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: hints.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SO2) -> hints.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *hints.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SO2) -> hints.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *hints.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self: SO2) -> 'SO2'

      Computes the inverse of our transform.

      :returns: *hints.Matrix* -- Output.


   .. method:: normalize(self: SO2) -> 'SO2'

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SO2'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



