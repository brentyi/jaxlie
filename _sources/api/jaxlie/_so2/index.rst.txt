:orphan:

:py:mod:`jaxlie._so2`
=====================

.. py:module:: jaxlie._so2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie.SO2




.. py:class:: SO2(parameters)


   Bases: :py:obj:`jax_dataclasses.EnforcedAnnotationsMixin`, :py:obj:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie.SO2
      :parts: 1

   
   Special orthogonal group for 2D rotations.

   Internal parameterization is ``(cos, sin)``. Tangent parameterization is ``(omega,)``.
   .. py:attribute:: unit_complex
      :type: typing_extensions.Annotated[jax.Array, (Ellipsis, 2), jax.numpy.floating]

      
      Internal parameters. ``(cos, sin)``.

   .. py:method:: __repr__()

      
      Return repr(self).

   .. py:method:: from_radians(theta)
      :staticmethod:

      
      Construct a rotation object from a scalar angle.

   .. py:method:: as_radians()

      
      Compute a scalar angle from a rotation object.

   .. py:method:: identity()
      :staticmethod:

      
      Returns identity element.

      :returns: Identity element.

   .. py:method:: from_matrix(matrix)
      :staticmethod:

      
      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.

   .. py:method:: as_matrix()

      
      Get transformation as a matrix. Homogeneous for SE groups.

   .. py:method:: parameters()

      
      Get underlying representation.

   .. py:method:: apply(target)

      
      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.

   .. py:method:: multiply(other)

      
      Composes this transformation with another.

      :returns: self @ other

   .. py:method:: exp(tangent)
      :staticmethod:

      
      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.

   .. py:method:: log()

      
      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.

   .. py:method:: adjoint()

      
      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.

   .. py:method:: inverse()

      
      Computes the inverse of our transform.

      :returns: Output.

   .. py:method:: normalize()

      
      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.

   .. py:method:: sample_uniform(key)
      :staticmethod:

      
      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.


