:orphan:

:mod:`jaxlie._se2`
==================

.. py:module:: jaxlie._se2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._se2.SE2



.. py:class:: SE2(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SEBase`

   .. autoapi-inheritance-diagram:: jaxlie._se2.SE2
      :parts: 1

   Special Euclidean group for proper rigid transforms in 2D.

   .. attribute:: unit_complex_xy
      :annotation: :annotations.Vector

      Internal parameters. ``(cos, sin, x, y)``.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_xy_theta(x: annotations.Scalar, y: annotations.Scalar, theta: annotations.Scalar) -> 'SE2'
      :staticmethod:


   .. method:: from_rotation_and_translation(rotation: SO2, translation: annotations.Vector) -> 'SE2'
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.


   .. method:: rotation(self) -> SO2

      Returns a transform's rotation term.


   .. method:: translation(self) -> annotations.Vector

      Returns a transform's translation term.


   .. method:: identity() -> 'SE2'
      :staticmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(matrix: annotations.Matrix) -> 'SE2'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: parameters(self) -> annotations.Vector

      Get underlying representation.


   .. method:: as_matrix(self) -> annotations.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: exp(tangent: annotations.TangentVector) -> 'SE2'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SE2) -> annotations.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SE2) -> annotations.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SE2'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



