:orphan:

:mod:`jaxlie._se2`
==================

.. py:module:: jaxlie._se2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._se2.SE2




.. class:: SE2(parameters)


   Bases: :py:obj:`jaxlie._base.SEBase`\ [\ :py:obj:`jaxlie._so2.SO2`\ ]

   .. autoapi-inheritance-diagram:: jaxlie._se2.SE2
      :parts: 1

   Special Euclidean group for proper rigid transforms in 2D.

   .. attribute:: unit_complex_xy
      :annotation: :jaxlie.hints.Vector

      Internal parameters. ``(cos, sin, x, y)``.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_xy_theta(x, y, theta)
      :staticmethod:

      Construct a transformation from standard 2D pose parameters. Note that this
      is not the same as integrating over a length-3 twist.


   .. method:: from_rotation_and_translation(rotation, translation)
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.


   .. method:: rotation(self)

      Returns a transform's rotation term.


   .. method:: translation(self)

      Returns a transform's translation term.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



