:orphan:

:py:mod:`jaxlie._se2`
=====================

.. py:module:: jaxlie._se2


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie.SE2




.. py:class:: SE2(parameters)


   Bases: :py:obj:`jaxlie.SEBase`\ [\ :py:obj:`jaxlie.SO2`\ ]

   .. autoapi-inheritance-diagram:: jaxlie.SE2
      :parts: 1

   
   Special Euclidean group for proper rigid transforms in 2D. Broadcasting
   rules are the same as for numpy.

   Internal parameterization is ``(cos, sin, x, y)``. Tangent parameterization is ``(vx,
   vy, omega)``.
   .. py:attribute:: unit_complex_xy
      :type: jax.Array

      
      Internal parameters. ``(cos, sin, x, y)``. Shape should be ``(*, 3)``.

   .. py:method:: __repr__()

      
      Return repr(self).

   .. py:method:: from_xy_theta(x, y, theta)
      :staticmethod:

      
      Construct a transformation from standard 2D pose parameters.

      Note that this is not the same as integrating over a length-3 twist.

   .. py:method:: from_rotation_and_translation(rotation, translation)
      :classmethod:

      
      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.

   .. py:method:: rotation()

      
      Returns a transform's rotation term.

   .. py:method:: translation()

      
      Returns a transform's translation term.

   .. py:method:: identity(batch_axes = ())
      :classmethod:

      
      Returns identity element.

      :param batch_axes: Any leading batch axes for the output transform.

      :returns: Identity element.

   .. py:method:: from_matrix(matrix)
      :classmethod:

      
      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.

   .. py:method:: parameters()

      
      Get underlying representation.

   .. py:method:: as_matrix()

      
      Get transformation as a matrix. Homogeneous for SE groups.

   .. py:method:: exp(tangent)
      :classmethod:

      
      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.

   .. py:method:: log()

      
      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.

   .. py:method:: adjoint()

      
      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.

   .. py:method:: sample_uniform(key, batch_axes = ())
      :classmethod:

      
      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :param batch_axes: Any leading batch axes for the output transforms. Each
                         sampled transform will be different.

      :returns: Sampled group member.


