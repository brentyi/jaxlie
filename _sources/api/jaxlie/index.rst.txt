:mod:`jaxlie`
=============

.. py:module:: jaxlie


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   annotations/index.rst
   manifold/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie.MatrixLieGroup
   jaxlie.SEBase
   jaxlie.SOBase
   jaxlie.SE2
   jaxlie.SE3
   jaxlie.SO2
   jaxlie.SO3



.. py:class:: MatrixLieGroup(parameters: jnp.ndarray)

   Bases: :class:`abc.ABC`, :class:`overrides.EnforceOverrides`

   .. autoapi-inheritance-diagram:: jaxlie.MatrixLieGroup
      :parts: 1

   Interface definition for matrix Lie groups.

   .. attribute:: matrix_dim
      :annotation: :int

      Dimension of square matrix output from ``.as_matrix()``.


   .. attribute:: parameters_dim
      :annotation: :int

      Dimension of underlying parameters, ``.parameters()``.


   .. attribute:: tangent_dim
      :annotation: :int

      Dimension of tangent space.


   .. attribute:: space_dim
      :annotation: :int

      Dimension of coordinates that can be transformed.


   .. method:: __matmul__(self: GroupType, other: GroupType) -> GroupType
               __matmul__(self: GroupType, other: annotations.Vector) -> annotations.Vector

      Overload for the ``@`` operator.

      Switches between the group action (\ ``.apply()``\ ) and multiplication
      (\ ``.multiply()``\ ) based on the type of ``other``.


   .. method:: identity(cls: Type[GroupType]) -> GroupType
      :classmethod:
      :abstractmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(cls: Type[GroupType], matrix: annotations.Matrix) -> GroupType
      :classmethod:
      :abstractmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: as_matrix(self) -> annotations.Matrix
      :abstractmethod:

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> annotations.Vector
      :abstractmethod:

      Get underlying representation.


   .. method:: apply(self: GroupType, target: annotations.Vector) -> annotations.Vector
      :abstractmethod:

      Applies the group action.

      :param target: annotations.Vector to transform.
      :type target: annotations.Vector

      :returns: *annotations.Vector* -- Transformed vector.


   .. method:: multiply(self: GroupType, other: GroupType) -> GroupType
      :abstractmethod:

      Left-multiplies this transformations with another.

      :param other: other
      :type other: GroupType

      :returns: *GroupType* -- self @ other


   .. method:: exp(cls: Type[GroupType], tangent: annotations.TangentVector) -> GroupType
      :classmethod:
      :abstractmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: GroupType) -> annotations.TangentVector
      :abstractmethod:

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: GroupType) -> annotations.Matrix
      :abstractmethod:

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self: GroupType) -> GroupType
      :abstractmethod:

      Computes the inverse of our transform.

      :returns: *annotations.Matrix* -- Output.


   .. method:: normalize(self: GroupType) -> GroupType
      :abstractmethod:

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(cls: Type[GroupType], key: jnp.ndarray) -> GroupType
      :classmethod:
      :abstractmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



.. py:class:: SEBase(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie.SEBase
      :parts: 1

   Base class for special Euclidean groups.

   .. method:: from_rotation_and_translation(rotation: SOBase, translation: annotations.Vector) -> SEGroupType
      :staticmethod:
      :abstractmethod:

      Construct a rigid transform from a rotation and a translation.


   .. method:: rotation(self) -> SOBase
      :abstractmethod:

      Returns a transform's rotation term.


   .. method:: translation(self) -> annotations.Vector
      :abstractmethod:

      Returns a transform's translation term.


   .. method:: apply(self, target: annotations.Vector) -> annotations.Vector

      Applies the group action.

      :param target: annotations.Vector to transform.
      :type target: annotations.Vector

      :returns: *annotations.Vector* -- Transformed vector.


   .. method:: multiply(self: SEGroupType, other: SEGroupType) -> SEGroupType

      Left-multiplies this transformations with another.

      :param other: other
      :type other: GroupType

      :returns: *GroupType* -- self @ other


   .. method:: inverse(self: SEGroupType) -> SEGroupType

      Computes the inverse of our transform.

      :returns: *annotations.Matrix* -- Output.


   .. method:: normalize(self: SEGroupType) -> SEGroupType

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.



.. py:class:: SOBase(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie.SOBase
      :parts: 1

   Base class for special orthogonal groups.


.. py:class:: SE2(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SEBase`

   .. autoapi-inheritance-diagram:: jaxlie.SE2
      :parts: 1

   Special Euclidean group for proper rigid transforms in 2D.

   .. attribute:: unit_complex_xy
      :annotation: :annotations.Vector

      Internal parameters. ``(cos, sin, x, y)``.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_xy_theta(x: annotations.Scalar, y: annotations.Scalar, theta: annotations.Scalar) -> 'SE2'
      :staticmethod:


   .. method:: from_rotation_and_translation(rotation: SO2, translation: annotations.Vector) -> 'SE2'
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.


   .. method:: rotation(self) -> SO2

      Returns a transform's rotation term.


   .. method:: translation(self) -> annotations.Vector

      Returns a transform's translation term.


   .. method:: identity() -> 'SE2'
      :staticmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(matrix: annotations.Matrix) -> 'SE2'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: parameters(self) -> annotations.Vector

      Get underlying representation.


   .. method:: as_matrix(self) -> annotations.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: exp(tangent: annotations.TangentVector) -> 'SE2'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SE2) -> annotations.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SE2) -> annotations.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SE2'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



.. py:class:: SE3(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SEBase`

   .. autoapi-inheritance-diagram:: jaxlie.SE3
      :parts: 1

   Special Euclidean group for proper rigid transforms in 3D.

   .. attribute:: wxyz_xyz
      :annotation: :annotations.Vector

      Internal parameters. wxyz quaternion followed by xyz translation.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_rotation_and_translation(rotation: SO3, translation: annotations.Vector) -> 'SE3'
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.


   .. method:: rotation(self) -> SO3

      Returns a transform's rotation term.


   .. method:: translation(self) -> annotations.Vector

      Returns a transform's translation term.


   .. method:: identity() -> 'SE3'
      :staticmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(matrix: annotations.Matrix) -> 'SE3'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: as_matrix(self) -> annotations.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> annotations.Vector

      Get underlying representation.


   .. method:: exp(tangent: annotations.TangentVector) -> 'SE3'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SE3) -> annotations.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SE3) -> annotations.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SE3'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



.. py:class:: SO2(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie.SO2
      :parts: 1

   Special orthogonal group for 2D rotations.

   .. attribute:: unit_complex
      :annotation: :annotations.Vector

      Internal parameters. ``(cos, sin)``.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_radians(theta: annotations.Scalar) -> 'SO2'
      :staticmethod:


   .. method:: as_radians(self) -> jnp.ndarray


   .. method:: identity() -> 'SO2'
      :staticmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(matrix: annotations.Matrix) -> 'SO2'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: as_matrix(self) -> annotations.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> annotations.Vector

      Get underlying representation.


   .. method:: apply(self: SO2, target: annotations.Vector) -> annotations.Vector

      Applies the group action.

      :param target: annotations.Vector to transform.
      :type target: annotations.Vector

      :returns: *annotations.Vector* -- Transformed vector.


   .. method:: multiply(self: SO2, other: SO2) -> 'SO2'

      Left-multiplies this transformations with another.

      :param other: other
      :type other: GroupType

      :returns: *GroupType* -- self @ other


   .. method:: exp(tangent: annotations.TangentVector) -> 'SO2'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SO2) -> annotations.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SO2) -> annotations.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self: SO2) -> 'SO2'

      Computes the inverse of our transform.

      :returns: *annotations.Matrix* -- Output.


   .. method:: normalize(self: SO2) -> 'SO2'

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SO2'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



.. py:class:: SO3(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie.SO3
      :parts: 1

   Special orthogonal group for 3D rotations.

   .. attribute:: wxyz
      :annotation: :annotations.Vector

      Internal parameters. ``(w, x, y, z)`` quaternion.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_x_radians(theta: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a x-axis rotation.

      :param angle: X rotation, in radians.

      :returns: *SO3* -- Output.


   .. method:: from_y_radians(theta: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a y-axis rotation.

      :param angle: Y rotation, in radians.

      :returns: *SO3* -- Output.


   .. method:: from_z_radians(theta: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a z-axis rotation.

      :param angle: Z rotation, in radians.

      :returns: *SO3* -- Output.


   .. method:: from_rpy_radians(roll: annotations.Scalar, pitch: annotations.Scalar, yaw: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a transform from a set of Euler angles.
      Uses the ZYX mobile robot convention.

      :param roll: X rotation, in radians. Applied first.
      :param pitch: Y rotation, in radians. Applied second.
      :param yaw: Z rotation, in radians. Applied last.

      :returns: *SO3* -- Output.


   .. method:: from_quaternion_xyzw(xyzw: annotations.Array) -> 'SO3'
      :staticmethod:

      Construct a rotation from an ``xyzw`` quaternion.

      Note that ``wxyz`` quaternions can be constructed using the default dataclass
      constructor.

      :param xyzw: xyzw quaternion. Shape should be (4,).
      :type xyzw: jnp.ndarray or onp.ndarray

      :returns: *SO3* -- Output.


   .. method:: as_quaternion_xyzw(self) -> jnp.ndarray

      Grab parameters as xyzw quaternion.


   .. method:: as_rpy_radians(self) -> annotations.RollPitchYaw

      Computes roll, pitch, and yaw angles.
      Uses the ZYX mobile robot convention.

      :returns: *annotations.RollPitchYaw* -- Named tuple containing Euler angles in radians.


   .. method:: compute_roll_radians(self) -> jnp.ndarray

      Compute roll angle.
      Uses the ZYX mobile robot convention.

      :returns: *jnp.ndarray* -- Euler angle in radians.


   .. method:: compute_pitch_radians(self) -> jnp.ndarray

      Compute pitch angle.
      Uses the ZYX mobile robot convention.

      :returns: *jnp.ndarray* -- Euler angle in radians.


   .. method:: compute_yaw_radians(self) -> jnp.ndarray

      Compute yaw angle.
      Uses the ZYX mobile robot convention.

      :returns: *jnp.ndarray* -- Euler angle in radians.


   .. method:: identity() -> 'SO3'
      :staticmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(matrix: annotations.Matrix) -> 'SO3'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: as_matrix(self) -> annotations.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> annotations.Vector

      Get underlying representation.


   .. method:: apply(self: SO3, target: annotations.Vector) -> annotations.Vector

      Applies the group action.

      :param target: annotations.Vector to transform.
      :type target: annotations.Vector

      :returns: *annotations.Vector* -- Transformed vector.


   .. method:: multiply(self: SO3, other: SO3) -> 'SO3'

      Left-multiplies this transformations with another.

      :param other: other
      :type other: GroupType

      :returns: *GroupType* -- self @ other


   .. method:: exp(tangent: annotations.TangentVector) -> 'SO3'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SO3) -> annotations.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SO3) -> annotations.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self: SO3) -> 'SO3'

      Computes the inverse of our transform.

      :returns: *annotations.Matrix* -- Output.


   .. method:: normalize(self: SO3) -> 'SO3'

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SO3'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



