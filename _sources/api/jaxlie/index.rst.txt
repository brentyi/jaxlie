:mod:`jaxlie`
=============

.. py:module:: jaxlie


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   hints/index.rst
   manifold/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie.MatrixLieGroup
   jaxlie.SEBase
   jaxlie.SOBase
   jaxlie.SE2
   jaxlie.SE3
   jaxlie.SO2
   jaxlie.SO3




.. class:: MatrixLieGroup(parameters)


   Bases: :py:obj:`abc.ABC`, :py:obj:`overrides.EnforceOverrides`

   .. autoapi-inheritance-diagram:: jaxlie.MatrixLieGroup
      :parts: 1

   Interface definition for matrix Lie groups.

   .. attribute:: matrix_dim
      :annotation: :ClassVar[int]

      Dimension of square matrix output from ``.as_matrix()``.


   .. attribute:: parameters_dim
      :annotation: :ClassVar[int]

      Dimension of underlying parameters, ``.parameters()``.


   .. attribute:: tangent_dim
      :annotation: :ClassVar[int]

      Dimension of tangent space.


   .. attribute:: space_dim
      :annotation: :ClassVar[int]

      Dimension of coordinates that can be transformed.


   .. method:: __matmul__(self: GroupType, other: GroupType) -> GroupType
               __matmul__(self: GroupType, other: jaxlie.hints.Vector) -> jaxlie.hints.VectorJax

      Overload for the ``@`` operator.

      Switches between the group action (\ ``.apply()``\ ) and multiplication
      (\ ``.multiply()``\ ) based on the type of ``other``.


   .. method:: identity(cls)
      :classmethod:
      :abstractmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(cls, matrix)
      :classmethod:
      :abstractmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)
      :abstractmethod:

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)
      :abstractmethod:

      Get underlying representation.


   .. method:: apply(self, target)
      :abstractmethod:

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)
      :abstractmethod:

      Composes this transformation with another.

      :returns: self @ other


   .. method:: exp(cls, tangent)
      :classmethod:
      :abstractmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)
      :abstractmethod:

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)
      :abstractmethod:

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self)
      :abstractmethod:

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)
      :abstractmethod:

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(cls, key)
      :classmethod:
      :abstractmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



.. class:: SEBase(parameters)


   Bases: :py:obj:`Generic`\ [\ :py:obj:`ContainedSOType`\ ], :py:obj:`MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie.SEBase
      :parts: 1

   Base class for special Euclidean groups.

   Each SE(N) group member contains an SO(N) rotation, as well as an N-dimensional
   translation vector.

   .. method:: from_rotation_and_translation(cls, rotation, translation)
      :classmethod:
      :abstractmethod:

      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.


   .. method:: rotation(self)
      :abstractmethod:

      Returns a transform's rotation term.


   .. method:: translation(self)
      :abstractmethod:

      Returns a transform's translation term.


   .. method:: apply(self, target)

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)

      Composes this transformation with another.

      :returns: self @ other


   .. method:: inverse(self)

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.



.. class:: SOBase(parameters)


   Bases: :py:obj:`MatrixLieGroup`

   .. autoapi-inheritance-diagram:: jaxlie.SOBase
      :parts: 1

   Base class for special orthogonal groups.


.. class:: SE2(parameters)


   Bases: :py:obj:`jaxlie._base.SEBase`\ [\ :py:obj:`jaxlie._so2.SO2`\ ]

   .. autoapi-inheritance-diagram:: jaxlie.SE2
      :parts: 1

   Special Euclidean group for proper rigid transforms in 2D.

   Internal parameterization is ``(cos, sin, x, y)``.
   Tangent parameterization is ``(vx, vy, omega)``.

   .. attribute:: unit_complex_xy
      :annotation: :jaxlie.hints.Vector

      Internal parameters. ``(cos, sin, x, y)``.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_xy_theta(x, y, theta)
      :staticmethod:

      Construct a transformation from standard 2D pose parameters. Note that this
      is not the same as integrating over a length-3 twist.


   .. method:: from_rotation_and_translation(rotation, translation)
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.


   .. method:: rotation(self)

      Returns a transform's rotation term.


   .. method:: translation(self)

      Returns a transform's translation term.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



.. class:: SE3(parameters)


   Bases: :py:obj:`jaxlie._base.SEBase`\ [\ :py:obj:`jaxlie._so3.SO3`\ ]

   .. autoapi-inheritance-diagram:: jaxlie.SE3
      :parts: 1

   Special Euclidean group for proper rigid transforms in 3D.

   Internal parameterization is ``(qw, qx, qy, qz, x, y, z)``.
   Tangent parameterization is ``(vx, vy, vz, omega_x, omega_y, omega_z)``.

   .. attribute:: wxyz_xyz
      :annotation: :jaxlie.hints.Vector

      Internal parameters. wxyz quaternion followed by xyz translation.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_rotation_and_translation(rotation, translation)
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.


   .. method:: rotation(self)

      Returns a transform's rotation term.


   .. method:: translation(self)

      Returns a transform's translation term.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



.. class:: SO2(parameters)


   Bases: :py:obj:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie.SO2
      :parts: 1

   Special orthogonal group for 2D rotations.

   Internal parameterization is ``(cos, sin)``.
   Tangent parameterization is ``(omega,)``.

   .. attribute:: unit_complex
      :annotation: :jaxlie.hints.Vector

      Internal parameters. ``(cos, sin)``.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_radians(theta)
      :staticmethod:

      Construct a rotation object from a scalar angle.


   .. method:: as_radians(self)

      Compute a scalar angle from a rotation object.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: apply(self, target)

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)

      Composes this transformation with another.

      :returns: self @ other


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self)

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



.. class:: SO3(parameters)


   Bases: :py:obj:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie.SO3
      :parts: 1

   Special orthogonal group for 3D rotations.

   Internal parameterization is ``(qw, qx, qy, qz)``.
   Tangent parameterization is ``(omega_x, omega_y, omega_z)``.

   .. attribute:: wxyz
      :annotation: :jaxlie.hints.Vector

      Internal parameters. ``(w, x, y, z)`` quaternion.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_x_radians(theta)
      :staticmethod:

      Generates a x-axis rotation.

      :param angle: X rotation, in radians.

      :returns: Output.


   .. method:: from_y_radians(theta)
      :staticmethod:

      Generates a y-axis rotation.

      :param angle: Y rotation, in radians.

      :returns: Output.


   .. method:: from_z_radians(theta)
      :staticmethod:

      Generates a z-axis rotation.

      :param angle: Z rotation, in radians.

      :returns: Output.


   .. method:: from_rpy_radians(roll, pitch, yaw)
      :staticmethod:

      Generates a transform from a set of Euler angles.
      Uses the ZYX mobile robot convention.

      :param roll: X rotation, in radians. Applied first.
      :param pitch: Y rotation, in radians. Applied second.
      :param yaw: Z rotation, in radians. Applied last.

      :returns: Output.


   .. method:: from_quaternion_xyzw(xyzw)
      :staticmethod:

      Construct a rotation from an ``xyzw`` quaternion.

      Note that ``wxyz`` quaternions can be constructed using the default dataclass
      constructor.

      :param xyzw: xyzw quaternion. Shape should be (4,).

      :returns: Output.


   .. method:: as_quaternion_xyzw(self)

      Grab parameters as xyzw quaternion.


   .. method:: as_rpy_radians(self)

      Computes roll, pitch, and yaw angles.
      Uses the ZYX mobile robot convention.

      :returns: Named tuple containing Euler angles in radians.


   .. method:: compute_roll_radians(self)

      Compute roll angle.
      Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.


   .. method:: compute_pitch_radians(self)

      Compute pitch angle.
      Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.


   .. method:: compute_yaw_radians(self)

      Compute yaw angle.
      Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: apply(self, target)

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)

      Composes this transformation with another.

      :returns: self @ other


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self)

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



