:mod:`jaxlie.manifold`
======================

.. py:module:: jaxlie.manifold


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   jaxlie.manifold.rminus
   jaxlie.manifold.rplus
   jaxlie.manifold.rplus_jacobian_parameters_wrt_delta



.. function:: rminus(a, b)

   Manifold right minus.

   Computes ``delta = (T_wa.inverse() @ T_wb).log()``.

   :param a: ``T_wa``
   :param b: ``T_wb``

   :returns: ``T_ab.log()``


.. function:: rplus(transform, delta)

   Manifold right plus.

   Computes ``T_wb = T_wa @ exp(delta)``.

   :param transform: ``T_wa``
   :param delta: ``T_ab.log()``

   :returns: *T* -- ``T_wb``


.. function:: rplus_jacobian_parameters_wrt_delta(transform)

   Analytical Jacobians for ``jaxlie.manifold.rplus()``\ , linearized around a zero
   local delta.

   Sometimes useful for manifold optimization.

   Equivalent to --

   .. code-block::

      def rplus_jacobian_parameters_wrt_delta(
          transform: jaxlie.MatrixLieGroup,
      ) -> jnp.ndarray:
          return jax.jacfwd(
              lambda delta: jaxlie.manifold.rplus(transform, delta).parameters()
          )(onp.zeros(transform.tangent_dim))

   :param transform:

   :returns: Jacobian. Shape should be ``(Group.parameters_dim, Group.tangent_dim)``.


