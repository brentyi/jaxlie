:orphan:

:mod:`jaxlie.manifold._autodiff`
================================

.. py:module:: jaxlie.manifold._autodiff


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   jaxlie.manifold._autodiff.zero_tangents
   jaxlie.manifold._autodiff.grad
   jaxlie.manifold._autodiff.value_and_grad



Attributes
~~~~~~~~~~

.. autoapisummary::

   jaxlie.manifold._autodiff.AxisName
   jaxlie.manifold._autodiff.P


.. function:: zero_tangents(pytree)

   Replace all values in a Pytree with zero vectors on the corresponding tangent
   spaces.


.. data:: AxisName
   

   

.. data:: P
   

   

.. function:: grad(fun: Callable[P, Any], argnums: int = 0, has_aux: bool = False, holomorphic: bool = False, allow_int: bool = False, reduce_axes: Sequence[AxisName] = ()) -> Callable[P, jaxlie.manifold._tree_utils.TangentPytree]
              grad(fun: Callable[P, Any], argnums: Sequence[int], has_aux: bool = False, holomorphic: bool = False, allow_int: bool = False, reduce_axes: Sequence[AxisName] = ()) -> Callable[P, Tuple[jaxlie.manifold._tree_utils.TangentPytree, Ellipsis]]

   Same as ``jax.grad``\ , but computes gradients of Lie groups with respect to
   tangent spaces.


.. function:: value_and_grad(fun: Callable[P, Any], argnums: int = 0, has_aux: bool = False, holomorphic: bool = False, allow_int: bool = False, reduce_axes: Sequence[AxisName] = ()) -> Callable[P, Tuple[Any, jaxlie.manifold._tree_utils.TangentPytree]]
              value_and_grad(fun: Callable[P, Any], argnums: Sequence[int], has_aux: bool = False, holomorphic: bool = False, allow_int: bool = False, reduce_axes: Sequence[AxisName] = ()) -> Callable[P, Tuple[Any, Tuple[jaxlie.manifold._tree_utils.TangentPytree, Ellipsis]]]

   Same as ``jax.value_and_grad``\ , but computes gradients of Lie groups with respect to
   tangent spaces.


