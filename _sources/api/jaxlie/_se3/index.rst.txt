:orphan:

:mod:`jaxlie._se3`
==================

.. py:module:: jaxlie._se3


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._se3.SE3




.. class:: SE3(parameters)


   Bases: :py:obj:`jax_dataclasses.EnforcedAnnotationsMixin`, :py:obj:`jaxlie.SEBase`\ [\ :py:obj:`jaxlie.SO3`\ ]

   .. autoapi-inheritance-diagram:: jaxlie._se3.SE3
      :parts: 1

   Special Euclidean group for proper rigid transforms in 3D.

   Internal parameterization is ``(qw, qx, qy, qz, x, y, z)``. Tangent parameterization
   is ``(vx, vy, vz, omega_x, omega_y, omega_z)``.

   .. attribute:: wxyz_xyz
      :annotation: :typing_extensions.Annotated[jax.numpy.ndarray, (7), jax.numpy.floating]

      Internal parameters. wxyz quaternion followed by xyz translation.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_rotation_and_translation(rotation, translation)
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.

      :param rotation: Rotation term.
      :param translation: translation term.

      :returns: Constructed transformation.


   .. method:: rotation(self)

      Returns a transform's rotation term.


   .. method:: translation(self)

      Returns a transform's translation term.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



