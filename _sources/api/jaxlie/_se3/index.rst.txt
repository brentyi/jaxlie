:orphan:

:mod:`jaxlie._se3`
==================

.. py:module:: jaxlie._se3


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._se3.SE3



.. py:class:: SE3(parameters: jnp.ndarray)

   Bases: :class:`jaxlie._base.SEBase[SO3]`

   .. autoapi-inheritance-diagram:: jaxlie._se3.SE3
      :parts: 1

   Special Euclidean group for proper rigid transforms in 3D.

   .. attribute:: wxyz_xyz
      :annotation: :hints.Vector

      Internal parameters. wxyz quaternion followed by xyz translation.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_rotation_and_translation(rotation: SO3, translation: hints.Vector) -> 'SE3'
      :staticmethod:

      Construct a rigid transform from a rotation and a translation.


   .. method:: rotation(self) -> SO3

      Returns a transform's rotation term.


   .. method:: translation(self) -> hints.Vector

      Returns a transform's translation term.


   .. method:: identity() -> 'SE3'
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix: hints.Matrix) -> 'SE3'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self) -> hints.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> hints.Vector

      Get underlying representation.


   .. method:: exp(tangent: hints.TangentVector) -> 'SE3'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self: SE3) -> hints.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SE3) -> hints.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SE3'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



