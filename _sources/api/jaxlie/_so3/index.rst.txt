:orphan:

:mod:`jaxlie._so3`
==================

.. py:module:: jaxlie._so3


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._so3.SO3



.. py:class:: SO3(parameters: jnp.ndarray)

   Bases: :class:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie._so3.SO3
      :parts: 1

   Special orthogonal group for 3D rotations.

   .. attribute:: wxyz
      :annotation: :annotations.Vector

      Internal parameters. ``(w, x, y, z)`` quaternion.


   .. method:: __repr__(self) -> str

      Return repr(self).


   .. method:: from_x_radians(theta: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a x-axis rotation.

      :param angle: X rotation, in radians.

      :returns: *SO3* -- Output.


   .. method:: from_y_radians(theta: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a y-axis rotation.

      :param angle: Y rotation, in radians.

      :returns: *SO3* -- Output.


   .. method:: from_z_radians(theta: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a z-axis rotation.

      :param angle: Z rotation, in radians.

      :returns: *SO3* -- Output.


   .. method:: from_rpy_radians(roll: annotations.Scalar, pitch: annotations.Scalar, yaw: annotations.Scalar) -> 'SO3'
      :staticmethod:

      Generates a transform from a set of Euler angles.
      Uses the ZYX mobile robot convention.

      :param roll: X rotation, in radians. Applied first.
      :param pitch: Y rotation, in radians. Applied second.
      :param yaw: Z rotation, in radians. Applied last.

      :returns: *SO3* -- Output.


   .. method:: from_quaternion_xyzw(xyzw: annotations.Array) -> 'SO3'
      :staticmethod:

      Construct a rotation from an ``xyzw`` quaternion.

      Note that ``wxyz`` quaternions can be constructed using the default dataclass
      constructor.

      :param xyzw: xyzw quaternion. Shape should be (4,).
      :type xyzw: jnp.ndarray or onp.ndarray

      :returns: *SO3* -- Output.


   .. method:: as_quaternion_xyzw(self) -> jnp.ndarray

      Grab parameters as xyzw quaternion.


   .. method:: as_rpy_radians(self) -> annotations.RollPitchYaw

      Computes roll, pitch, and yaw angles.
      Uses the ZYX mobile robot convention.

      :returns: *annotations.RollPitchYaw* -- Named tuple containing Euler angles in radians.


   .. method:: compute_roll_radians(self) -> jnp.ndarray

      Compute roll angle.
      Uses the ZYX mobile robot convention.

      :returns: *jnp.ndarray* -- Euler angle in radians.


   .. method:: compute_pitch_radians(self) -> jnp.ndarray

      Compute pitch angle.
      Uses the ZYX mobile robot convention.

      :returns: *jnp.ndarray* -- Euler angle in radians.


   .. method:: compute_yaw_radians(self) -> jnp.ndarray

      Compute yaw angle.
      Uses the ZYX mobile robot convention.

      :returns: *jnp.ndarray* -- Euler angle in radians.


   .. method:: identity() -> 'SO3'
      :staticmethod:

      Returns identity element.

      :returns: *annotations.Matrix* -- Identity.


   .. method:: from_matrix(matrix: annotations.Matrix) -> 'SO3'
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: annotations.Matrix representaiton.
      :type matrix: jnp.ndarray

      :returns: *GroupType* -- Group member.


   .. method:: as_matrix(self) -> annotations.Matrix

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self) -> annotations.Vector

      Get underlying representation.


   .. method:: apply(self: SO3, target: annotations.Vector) -> annotations.Vector

      Applies the group action.

      :param target: annotations.Vector to transform.
      :type target: annotations.Vector

      :returns: *annotations.Vector* -- Transformed vector.


   .. method:: multiply(self: SO3, other: SO3) -> 'SO3'

      Left-multiplies this transformations with another.

      :param other: other
      :type other: GroupType

      :returns: *GroupType* -- self @ other


   .. method:: exp(tangent: annotations.TangentVector) -> 'SO3'
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Input.
      :type tangent: annotations.TangentVector

      :returns: *MatrixLieGroup* -- Output.


   .. method:: log(self: SO3) -> annotations.TangentVector

      Computes ``vee(logm(transformation matrix))``.

      :returns: *annotations.TangentVector* -- Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self: SO3) -> annotations.Matrix

      Computes the adjoint, which transforms tangent vectors between tangent spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for converting twists, wrenches, and Jacobians
      between our spatial and body representations.

      :returns: *annotations.Matrix* -- Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self: SO3) -> 'SO3'

      Computes the inverse of our transform.

      :returns: *annotations.Matrix* -- Output.


   .. method:: normalize(self: SO3) -> 'SO3'

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key: jnp.ndarray) -> 'SO3'
      :staticmethod:

      Draw a uniform sample from the group. Translations are in the range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :type key: jnp.ndarray

      :returns: *MatrixLieGroup* -- Sampled group member.



