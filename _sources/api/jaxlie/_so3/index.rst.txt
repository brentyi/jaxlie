:orphan:

:py:mod:`jaxlie._so3`
=====================

.. py:module:: jaxlie._so3


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie.SO3




.. py:class:: SO3(parameters)


   Bases: :py:obj:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie.SO3
      :parts: 1

   
   Special orthogonal group for 3D rotations. Broadcasting rules are the same as
   for numpy.

   Internal parameterization is ``(qw, qx, qy, qz)``. Tangent parameterization is
   ``(omega_x, omega_y, omega_z)``.
   .. py:attribute:: wxyz
      :type: jax.Array

      
      Internal parameters. ``(w, x, y, z)`` quaternion. Shape should be ``(*, 4)``.

   .. py:method:: __repr__()

      
      Return repr(self).

   .. py:method:: from_x_radians(theta)
      :staticmethod:

      
      Generates a x-axis rotation.

      :param angle: X rotation, in radians.

      :returns: Output.

   .. py:method:: from_y_radians(theta)
      :staticmethod:

      
      Generates a y-axis rotation.

      :param angle: Y rotation, in radians.

      :returns: Output.

   .. py:method:: from_z_radians(theta)
      :staticmethod:

      
      Generates a z-axis rotation.

      :param angle: Z rotation, in radians.

      :returns: Output.

   .. py:method:: from_rpy_radians(roll, pitch, yaw)
      :staticmethod:

      
      Generates a transform from a set of Euler angles. Uses the ZYX mobile robot
      convention.

      :param roll: X rotation, in radians. Applied first.
      :param pitch: Y rotation, in radians. Applied second.
      :param yaw: Z rotation, in radians. Applied last.

      :returns: Output.

   .. py:method:: from_quaternion_xyzw(xyzw)
      :staticmethod:

      
      Construct a rotation from an ``xyzw`` quaternion.

      Note that ``wxyz`` quaternions can be constructed using the default dataclass
      constructor.

      :param xyzw: xyzw quaternion. Shape should be (*, 4).

      :returns: Output.

   .. py:method:: as_quaternion_xyzw()

      
      Grab parameters as xyzw quaternion.

   .. py:method:: as_rpy_radians()

      
      Computes roll, pitch, and yaw angles. Uses the ZYX mobile robot convention.

      :returns: Named tuple containing Euler angles in radians.

   .. py:method:: compute_roll_radians()

      
      Compute roll angle. Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.

   .. py:method:: compute_pitch_radians()

      
      Compute pitch angle. Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.

   .. py:method:: compute_yaw_radians()

      
      Compute yaw angle. Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.

   .. py:method:: identity(batch_axes = ())
      :classmethod:

      
      Returns identity element.

      :param batch_axes: Any leading batch axes for the output transform.

      :returns: Identity element.

   .. py:method:: from_matrix(matrix)
      :classmethod:

      
      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.

   .. py:method:: as_matrix()

      
      Get transformation as a matrix. Homogeneous for SE groups.

   .. py:method:: parameters()

      
      Get underlying representation.

   .. py:method:: apply(target)

      
      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.

   .. py:method:: multiply(other)

      
      Composes this transformation with another.

      :returns: self @ other

   .. py:method:: exp(tangent)
      :classmethod:

      
      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.

   .. py:method:: log()

      
      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.

   .. py:method:: adjoint()

      
      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.

   .. py:method:: inverse()

      
      Computes the inverse of our transform.

      :returns: Output.

   .. py:method:: normalize()

      
      Normalize/projects values and returns.

      :returns: Normalized group member.

   .. py:method:: jlog()

      
      Computes the Jacobian of the logarithm of the group element when a
      local perturbation is applied.

      This is equivalent to the inverse of the right Jacobian, or:

      .. code-block::

         jax.jacrev(lambda x: (T @ exp(x)).log())(jnp.zeros(tangent_dim))

      where ``T`` is the group element and ``exp(x)`` is the tangent vector.

      :returns: The Jacobian of the logarithm, having the dimensions ``(tangent_dim, tangent_dim,)`` or batch of these Jacobians.

   .. py:method:: sample_uniform(key, batch_axes = ())
      :classmethod:

      
      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.
      :param batch_axes: Any leading batch axes for the output transforms. Each
                         sampled transform will be different.

      :returns: Sampled group member.


