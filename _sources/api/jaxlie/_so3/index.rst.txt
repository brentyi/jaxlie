:orphan:

:mod:`jaxlie._so3`
==================

.. py:module:: jaxlie._so3


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jaxlie._so3.SO3




.. class:: SO3(parameters)


   Bases: :py:obj:`jaxlie.SOBase`

   .. autoapi-inheritance-diagram:: jaxlie._so3.SO3
      :parts: 1

   Special orthogonal group for 3D rotations.

   Internal parameterization is ``(qw, qx, qy, qz)``. Tangent parameterization is
   ``(omega_x, omega_y, omega_z)``.

   .. attribute:: wxyz
      :annotation: :jaxlie.hints.Vector

      Internal parameters. ``(w, x, y, z)`` quaternion.


   .. method:: __repr__(self)

      Return repr(self).


   .. method:: from_x_radians(theta)
      :staticmethod:

      Generates a x-axis rotation.

      :param angle: X rotation, in radians.

      :returns: Output.


   .. method:: from_y_radians(theta)
      :staticmethod:

      Generates a y-axis rotation.

      :param angle: Y rotation, in radians.

      :returns: Output.


   .. method:: from_z_radians(theta)
      :staticmethod:

      Generates a z-axis rotation.

      :param angle: Z rotation, in radians.

      :returns: Output.


   .. method:: from_rpy_radians(roll, pitch, yaw)
      :staticmethod:

      Generates a transform from a set of Euler angles. Uses the ZYX mobile robot
      convention.

      :param roll: X rotation, in radians. Applied first.
      :param pitch: Y rotation, in radians. Applied second.
      :param yaw: Z rotation, in radians. Applied last.

      :returns: Output.


   .. method:: from_quaternion_xyzw(xyzw)
      :staticmethod:

      Construct a rotation from an ``xyzw`` quaternion.

      Note that ``wxyz`` quaternions can be constructed using the default dataclass
      constructor.

      :param xyzw: xyzw quaternion. Shape should be (4,).

      :returns: Output.


   .. method:: as_quaternion_xyzw(self)

      Grab parameters as xyzw quaternion.


   .. method:: as_rpy_radians(self)

      Computes roll, pitch, and yaw angles. Uses the ZYX mobile robot convention.

      :returns: Named tuple containing Euler angles in radians.


   .. method:: compute_roll_radians(self)

      Compute roll angle. Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.


   .. method:: compute_pitch_radians(self)

      Compute pitch angle. Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.


   .. method:: compute_yaw_radians(self)

      Compute yaw angle. Uses the ZYX mobile robot convention.

      :returns: Euler angle in radians.


   .. method:: identity()
      :staticmethod:

      Returns identity element.

      :returns: Identity element.


   .. method:: from_matrix(matrix)
      :staticmethod:

      Get group member from matrix representation.

      :param matrix: Matrix representaiton.

      :returns: Group member.


   .. method:: as_matrix(self)

      Get transformation as a matrix. Homogeneous for SE groups.


   .. method:: parameters(self)

      Get underlying representation.


   .. method:: apply(self, target)

      Applies group action to a point.

      :param target: Point to transform.

      :returns: Transformed point.


   .. method:: multiply(self, other)

      Composes this transformation with another.

      :returns: self @ other


   .. method:: exp(tangent)
      :staticmethod:

      Computes ``expm(wedge(tangent))``.

      :param tangent: Tangent vector to take the exponential of.

      :returns: Output.


   .. method:: log(self)

      Computes ``vee(logm(transformation matrix))``.

      :returns: Output. Shape should be ``(tangent_dim,)``.


   .. method:: adjoint(self)

      Computes the adjoint, which transforms tangent vectors between tangent
      spaces.

      More precisely, for a transform ``GroupType``\ :

      .. code-block::

         GroupType @ exp(omega) = exp(Adj_T @ omega) @ GroupType

      In robotics, typically used for transforming twists, wrenches, and Jacobians
      across different reference frames.

      :returns: Output. Shape should be ``(tangent_dim, tangent_dim)``.


   .. method:: inverse(self)

      Computes the inverse of our transform.

      :returns: Output.


   .. method:: normalize(self)

      Normalize/projects values and returns.

      :returns: *GroupType* -- Normalized group member.


   .. method:: sample_uniform(key)
      :staticmethod:

      Draw a uniform sample from the group. Translations (if applicable) are in the
      range [-1, 1].

      :param key: PRNG key, as returned by ``jax.random.PRNGKey()``.

      :returns: Sampled group member.



